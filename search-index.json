[{"url":"\/contributing.html","title":"Contributing","content":"Contributing\n\nContributions are welcome and will be fully credited.\n\nPlease read and understand the contribution guide before creating an issue or pull request.\n\nEtiquette\n\nThis project is open source, and as such, the maintainers give their free time to build and maintain the source code held within. They make the code freely available in the hope that it will be of use to other developers. It would be extremely unfair for them to suffer abuse or anger for their hard work.\n\nPlease be considerate towards maintainers when raising issues or presenting pull requests. Let's show the world that developers are civilized and selfless people.\n\nIt's the duty of the maintainer to ensure that all submissions to the project are of sufficient quality to benefit the project. Many developers have different skillsets, strengths, and weaknesses. Respect the maintainer's decision, and do not be upset or abusive if your submission is not used.\n\nViability\n\nWhen requesting or submitting new features, first consider whether it might be useful to others. Open source projects are used by many developers, who may have entirely different needs to your own. Think about whether or not your feature is likely to be used by other users of the project.\n\nProcedure\n\nBefore filing an issue:\n\n- Attempt to replicate the problem, to ensure that it wasn't a coincidental incident.\n- Check to make sure your feature suggestion isn't already present within the project.\n- Check the pull requests tab to ensure that the bug doesn't have a fix in progress.\n- Check the pull requests tab to ensure that the feature isn't already in progress.\n\nBefore submitting a pull request:\n\n- Check the codebase to ensure that your feature doesn't already exist.\n- Check the pull requests to ensure that another person hasn't already submitted the feature or fix.\n\nRequirements\n\nIf the project maintainer has any additional requirements, you will find them listed here.\n\n-\n\n[PSR-2 Coding Standard](https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/psr-2-coding-style-guide.html) - The easiest way to apply the conventions is to install [PHP Code Sniffer](http:\/\/pear.php.net\/package\/PHP_CodeSniffer).\n\n-\n\nAdd tests! - Your patch won't be accepted if it doesn't have tests.\n\n-\n\nDocument any change in behaviour - Make sure the README.md and any other relevant documentation are kept up-to-date.\n\n-\n\nConsider our release cycle - We try to follow [SemVer v2.0.0](http:\/\/semver.org\/). Randomly breaking public APIs is not an option.\n\n-\n\nOne pull request per feature - If you want to do more than one thing, send multiple pull requests.\n\n- Send coherent history - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please [squash them](http:\/\/www.git-scm.com\/book\/en\/v2\/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) before submitting.\n\nHappy coding!","description":""},{"url":"\/","title":"Introduction.","content":"https:\/\/https:\/\/www.openapis.org\/\nhttps:\/\/https:\/\/www.openapis.org\/##\nhttps:\/\/www.ovac4u.com\/idoc\n\n[Build Status](https:\/\/travis-ci.org\/ovac\/hubtel-payment) [Coverage Status](https:\/\/coveralls.io\/github\/ovac\/hubtel-payment?branch=master) [Latest Stable Version](https:\/\/packagist.org\/packages\/ovac\/hubtel-payment) [Total Downloads](https:\/\/packagist.org\/packages\/ovac\/hubtel-payment) [License](https:\/\/packagist.org\/packages\/ovac\/hubtel-payment) [Dependency Status](https:\/\/www.versioneye.com\/user\/projects\/598fccd8368b081653c84e2e)\n\nFollow me anywhere @ovac4u                         | GitHub\n _________                          _________       | Twitter\n|   ___   |.-----.--.--.---.-.----.|  |  |.--.--.   | Facboook\n|  |  _   ||  _  |  |  |  _  |  __||__    |  |  |   | Instagram\n|  |______||_____|\\___\/|___._|____|   |__||_____|   | Github + @ovac\n|_________|                        www.ovac4u.com   | Facebook + @ovacposts\n\nLaravel IDoc - The API Documentation Generator\n\nAutomatically generate an interactive API documentation from your existing Laravel routes. Take a look at the [example documentation](https:\/\/www.ovac4u.com\/idoc\/index.html). Inspired by [Laravel Api Documentation Generator](mpociot\/laravel-apidoc-generator)\n\nIntroduction.\n\nLaravel IDoc generator (interactive documentation generator) is a seamless and complete plugin for generating API documentation from your Laravel's codebase. It is inspired by the laravel-apidoc-generator, ReDoc and the Open API initiative from Swagger. IDoc has been built with extendability so that it can easily adapt with your use case.\n\n[Demo]\n\nFeatures\n\n- Extremely easy deployment\n- Server Side Rendering ready\n- The widest OpenAPI v2.0 features support\n\n- OpenAPI 3.0 support\n- Neat interactive documentation for nested objects\n\n- Automatic code sample support\n\n- Responsive three-panel design with menu\/scrolling synchronization\n- Integrate API Introduction into side menu.\n- High-level grouping in side-menu.\n- Branding\/customizations.\n\nInstallation\n\n> Note: PHP 7 and Laravel 5.5 or higher are the minimum dependencies.\n\n$ composer require ovac\/idoc\n\nLaravel\n\nPublish the config file by running:\n\nphp artisan vendor:publish --tag=idoc-config\n\nThis will create an idoc.php file in your config folder.\n\nLumen\n\n- Register the service provider in your bootstrap\/app.php:\n\n$app->register(\\OVAC\\IDoc\\IDocServiceProvider::class);\n\n- Copy the config file from vendor\/ovac\/idoc\/config\/idoc.php to your project as config\/idoc.php. Then add to your bootstrap\/app.php:\n\n$app->configure('idoc');\n\nUsage\n\n$ php artisan idoc:generate\n\nConfiguration\n\nBefore you can generate your documentation, you'll need to configure a few things in your config\/idoc.php.\n\n-\n\noutput This is the file path where the generated documentation will be written to. Default: public\/docs\n\n-\n\ncollection This package can automatically generate an Open-API 3.0 specification file for your routes, along with the documentation. This section is where you can configure if you want a download button visible on the documentation.\n\n-\n\nrouter The router to use when processing the route (can be Laravel or Dingo. Defaults to Laravel)\n\n-\n\nlogo You can specify your custom logo to be used on the generated documentation. A relative or absolute url to the logo image.\n\n- routes This is where you specify what rules documentation should be generated for. You specify routes to be parsed by defining conditions that the routes should meet and rules that should be applied when generating documentation. These conditions and rules are specified in groups, allowing you to apply different rules to different routes.\n\nFor instance, suppose your configuration looks like this:\n\nreturn [\n     \/\/...,\n\n     'routes' => [\n          [\n              'match' => [\n                  'domains' => ['*'],\n                  'prefixes' => ['api\/*', 'v2-api\/*'],\n                  'versions' => ['v1'],\n              ],\n              'include' => ['users.index', 'healthcheck*'],\n              'exclude' => ['users.create', 'admin.*'],\n              'apply' => [\n                  'headers' => [\n                      'Authorization' => 'Bearer: {token}',\n                  ],\n              ],\n          ],\n];\n\nThis means documentation will be generated for routes in all domains ('&ast;' is a wildcard meaning 'any character') which match any of the patterns 'api\/&ast;' or 'v2-api\/&ast;', excluding the 'users.create' route and any routes whose names begin with admin., and including the 'users.index' route and any routes whose names begin with healthcheck.. (The versions key is ignored unless you are using Dingo router). Also, in the generated documentation, these routes will have the header 'Authorization: Bearer: {token}' added to the example requests.\n\nYou can also separate routes into groups to apply different rules to them:\n\n<?php\nreturn [\n     \/\/...,\n\n     'routes' => [\n          [\n              'match' => [\n                  'domains' => ['v1.*'],\n                  'prefixes' => ['*'],\n              ],\n              'include' => [],\n              'exclude' => [],\n              'apply' => [\n                  'headers' => [\n                      'Token' => '{token}',\n                      'Version' => 'v1',\n                  ],\n              ],\n          ],\n          [\n              'match' => [\n                  'domains' => ['v2.*'],\n                  'prefixes' => ['*'],\n              ],\n              'include' => [],\n              'exclude' => [],\n              'apply' => [\n                  'headers' => [\n                      'Authorization' => 'Bearer: {token}',\n                      'Api-Version' => 'v2',\n                  ],\n              ],\n          ],\n];\n\nWith the configuration above, routes on the v1.* domain will have the Token and Version headers applied, while routes on the v2.* domain will have the Authorization and Api-Version headers applied.\n\n> Note: the include and exclude items are arrays of route names. THe &ast; wildcard is supported. Note: If you're using DIngo router, the versions parameter is required in each route group. This parameter does not support wildcards. Each version must be listed explicitly,\n\nTo generate your API documentation, use the idoc:generate artisan command.\n\n$ php artisan idoc:generate\n\nIt will generate documentation using your specified configuration.\n\nDocumenting your API\n\nThis package uses these resources to generate the API documentation:\n\nGrouping endpoints\n\nThis package uses the HTTP controller doc blocks to create a table of contents and show descriptions for your API methods.\n\nUsing @group in a controller doc block creates a Group within the API documentation. All routes handled by that controller will be grouped under this group in the sidebar. The short description after the @group should be unique to allow anchor tags to navigate to this section. A longer description can be included below. Custom formatting and <aside> tags are also supported. (see the [Documentarian docs](http:\/\/marcelpociot.de\/documentarian\/installation\/markdown_syntax))\n\n> Note: using @group is optional. Ungrouped routes will be placed in a \"general\" group.\n\nAbove each method within the controller you wish to include in your API documentation you should have a doc block. This should include a unique short description as the first entry. An optional second entry can be added with further information. Both descriptions will appear in the API documentation in a different format as shown below. You can also specify an @group on a single method to override the group defined at the controller level.\n\n\/**\n * @group User management\n *\n * APIs for managing users\n *\/\nclass UserController extends Controller\n{\n\n    \/**\n     * Create a user\n     *\n     * [Insert optional longer description of the API endpoint here.]\n     *\n     *\/\n     public function createUser()\n     {\n\n     }\n\n    \/**\n     * @group Account management\n     *\n     *\/\n     public function changePassword()\n     {\n\n     }\n}\n\nSpecifying request parameters\n\nTo specify a list of valid parameters your API route accepts, use the @bodyParam and @queryParam annotations.\n\n- The @bodyParam annotation takes the name of the parameter, its type, an optional \"required\" label, and then its description.\n- The @queryParam annotation takes the name of the parameter, an optional \"required\" label, and then its description\n\n\/**\n * @bodyParam title string required The title of the post.\n * @bodyParam body string required The title of the post.\n * @bodyParam type string The type of post to create. Defaults to 'textophonious'.\n * @bodyParam author_id int the ID of the author\n * @bodyParam thumbnail image This is required if the post type is 'imagelicious'.\n *\/\npublic function createPost()\n{\n    \/\/ ...\n}\n\n\/**\n * @queryParam sort Field to sort by\n * @queryParam page The page number to return\n * @queryParam fields required The fields to include\n *\/\npublic function listPosts()\n{\n    \/\/ ...\n}\n\nThey will be included in the generated documentation text and example requests.\n\nResult:\n\nNote: a random value will be used as the value of each parameter in the example requests. If you'd like to specify an example value, you can do so by adding Example: your-example to the end of your description. For instance:\n\n\/**\n     * @queryParam location_id required The id of the location.\n     * @queryParam user_id required The id of the user. Example: me\n     * @queryParam page required The page number. Example: 4\n     * @bodyParam user_id int required The id of the user. Example: 9\n     * @bodyParam room_id string The id of the room.\n     * @bodyParam forever boolean Whether to ban the user forever. Example: false\n     *\/\n\nNote: You can also add the @bodyParam annotations to a \\Illuminate\\Foundation\\Http\\FormRequest subclass:\n\n\/**\n * @bodyParam title string required The title of the post.\n * @bodyParam body string required The title of the post.\n * @bodyParam type string The type of post to create. Defaults to 'textophonious'.\n * @bodyParam author_id int the ID of the author\n * @bodyParam thumbnail image This is required if the post type is 'imagelicious'.\n *\/\nclass MyRequest extends \\Illuminate\\Foundation\\Http\\FormRequest\n{\n\n}\n\npublic function createPost(MyRequest $request)\n{\n    \/\/ ...\n}\n\nIndicating auth status\n\nYou can use the @authenticated annotation on a method to indicate if the endpoint is authenticated. A \"Requires authentication\" badge will be added to that route in the generated documentation.\n\nProviding an example response\n\nYou can provide an example response for a route. This will be displayed in the examples section. There are several ways of doing this.\n\n@response\n\nYou can provide an example response for a route by using the @response annotation with valid JSON:\n\n\/**\n * @response {\n *  \"id\": 4,\n *  \"name\": \"Jessica Jones\",\n *  \"roles\": [\"admin\"]\n * }\n *\/\npublic function show($id)\n{\n    return User::find($id);\n}\n\nMoreover, you can define multiple @response tags as well as the HTTP status code related to a particular response (if no status code set, 200 will be returned):\n\n\/**\n * @response {\n *  \"id\": 4,\n *  \"name\": \"Jessica Jones\",\n *  \"roles\": [\"admin\"]\n * }\n * @response 404 {\n *  \"message\": \"No query results for model [\\App\\User]\"\n * }\n *\/\npublic function show($id)\n{\n    return User::findOrFail($id);\n}\n\n@transformer, @transformerCollection, and @transformerModel\n\nYou can define the transformer that is used for the result of the route using the @transformer tag (or @transformerCollection if the route returns a list). The package will attempt to generate an instance of the model to be transformed using the following steps, stopping at the first successful one:\n\n- Check if there is a @transformerModel tag to define the model being transformed. If there is none, use the class of the first parameter to the transformer's transform() method.\n- Get an instance of the model from the Eloquent model factory\n- If the parameter is an Eloquent model, load the first from the database.\n- Create an instance using new.\n\nFinally, it will pass in the model to the transformer and display the result of that as the example response.\n\nFor example:\n\n\/**\n * @transformercollection \\App\\Transformers\\UserTransformer\n * @transformerModel \\App\\User\n *\/\npublic function listUsers()\n{\n    \/\/...\n}\n\n\/**\n * @transformer \\App\\Transformers\\UserTransformer\n *\/\npublic function showUser(User $user)\n{\n    \/\/...\n}\n\n\/**\n * @transformer \\App\\Transformers\\UserTransformer\n * @transformerModel \\App\\User\n *\/\npublic function showUser(int $id)\n{\n    \/\/ ...\n}\n\nFor the first route above, this package will generate a set of two users then pass it through the transformer. For the last two, it will generate a single user and then pass it through the transformer.\n\n> Note: for transformer support, you need to install the league\/fractal package\n\ncomposer require league\/fractal\n\n@responseFile\n\nFor large response bodies, you may want to use a dump of an actual response. You can put this response in a file (as a JSON string) within your Laravel storage directory and link to it. For instance, we can put this response in a file named users.get.json in storage\/responses:\n\n{\"id\":5,\"name\":\"Jessica Jones\",\"gender\":\"female\"}\n\nThen in your controller, link to it by:\n\n\/**\n * @responseFile responses\/users.get.json\n *\/\npublic function getUser(int $id)\n{\n  \/\/ ...\n}\n\nThe package will parse this response and display in the examples for this route.\n\nSimilarly to @response tag, you can provide multiple @responseFile tags along with the HTTP status code of the response:\n\n\/**\n * @responseFile responses\/users.get.json\n * @responseFile 404 responses\/model.not.found.json\n *\/\npublic function getUser(int $id)\n{\n  \/\/ ...\n}\n\nGenerating responses automatically\n\nIf you don't specify an example response using any of the above means, this package will attempt to get a\n\nresponse by making a request to the route (a \"response call\"). A few things to note about response calls:\n\n- They are done within a database transaction and changes are rolled back afterwards.\n- The configuration for response calls is located in the config\/idoc.php. They are configured within the ['apply']['response_calls'] section for each route group, allowing you to apply different settings for different sets of routes.\n- By default, response calls are only made for GET routes, but you can configure this. Set the methods key to an array of methods or '*' to mean all methods. Leave it as an empty array to turn off response calls for that route group.\n- Parameters in URLs (example: \/users\/{user}, \/orders\/{id?}) will be replaced with '1' by default. You can configure this, however. Put the parameter names (including curly braces and question marks) as the keys and their replacements as the values in the bindings key.\n- You can configure environment variables (this is useful so you can prevent external services like notifications from being triggered). By default the APP_ENV is set to 'documentation'. You can add more variables in the env key.\n- By default, the package will generate dummy values for your documented body and query parameters and send in the request. (If you specified example values using @bodyParam or @queryParam, those will be used instead.) You can configure what headers and additional query and parameters should be sent when making the request (the headers, query, and body keys respectively).\n\nOpen-API 3.0 spec file\n\nThe generator automatically creates an Open-API 3.0 spec file, which you can import to use within any external api application.\n\nThe default base URL added to the spec file will be that found in your Laravel config\/app.php file. This will likely be http:\/\/localhost. If you wish to change this setting you can directly update the url or link this config value to your environment file to make it more flexible (as shown below):\n\n'url' => env('APP_URL', 'http:\/\/yourappdefault.app'),\n\nIf you are referring to the environment setting as shown above, then you should ensure that you have updated your .env file to set the APP_URL value as appropriate. Otherwise the default value (http:\/\/yourappdefault.app) will be used in your spec file. Example environment value:\n\nAPP_URL=http:\/\/yourapp.app\n\nFurther modification\n\nThe info file in the view folder can be further modified to add introductions and further documentation.\n\nCredits\n\nThis software uses the following open source packages:\n\n- [Laravel](https:\/\/laravel.com\/)\n- [Redoc](https:\/\/github.com\/Rebilly\/ReDoc)\n- [Ramsey UUID](https:\/\/github.com\/ramsey\/uuid)\n\nYou may also like...\n\n- [Laravel Api Documentation Generator](mpociot\/laravel-apidoc-generator) - A laravel api documentation generator.\n\nLicense\n\nMIT","description":""},{"url":"\/license.html","title":"\/license.html","content":"The MIT License (MIT)\n\nCopyright (c) 2019 Ariama Victor (A.K.A. ovac4u)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","description":""}]